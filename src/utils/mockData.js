// Mock data initialization utility
export const initializeMockData = () => {
  // Initialize shops if not exists
  if (!localStorage.getItem('shops')) {
    const mockShops = [
      {
        id: 'shop_001',
        name: 'Coffee Corner - Terminal A',
        location: 'Terminal A, Gate 12',
        terminal: 'A',
        vendorId: 'vendor_001',
        status: 'active',
        type: 'Food & Beverage'
      },
      {
        id: 'shop_002',
        name: 'Snack Bar - Terminal B',
        location: 'Terminal B, Gate 8',
        terminal: 'B',
        vendorId: 'vendor_001',
        status: 'active',
        type: 'Food & Beverage'
      },
      {
        id: 'shop_003',
        name: 'Gift Shop - Terminal C',
        location: 'Terminal C, Gate 15',
        terminal: 'C',
        vendorId: 'vendor_001',
        status: 'active',
        type: 'Retail'
      }
    ];
    localStorage.setItem('shops', JSON.stringify(mockShops));
  }

  // Initialize cashiers if not exists
  if (!localStorage.getItem('cashiers')) {
    const mockCashiers = [
      {
        id: 'cashier_001',
        name: 'Jane Smith',
        email: 'cashier@shop1.com',
        password: 'cashier123',
        shopId: 'shop_001',
        vendorId: 'vendor_001',
        status: 'active',
        permissions: ['process_bills', 'view_inventory', 'generate_receipts']
      },
      {
        id: 'cashier_002',
        name: 'Mike Johnson',
        email: 'mike@shop1.com',
        password: 'cashier123',
        shopId: 'shop_001',
        vendorId: 'vendor_001',
        status: 'active',
        permissions: ['process_bills', 'view_inventory', 'generate_receipts']
      },
      {
        id: 'cashier_003',
        name: 'Sarah Wilson',
        email: 'sarah@shop2.com',
        password: 'cashier123',
        shopId: 'shop_002',
        vendorId: 'vendor_001',
        status: 'active',
        permissions: ['process_bills', 'view_inventory', 'generate_receipts']
      }
    ];
    localStorage.setItem('cashiers', JSON.stringify(mockCashiers));
  }

  // Initialize vendors if not exists
  if (!localStorage.getItem('vendors')) {
    const mockVendors = [
      {
        id: 'vendor_001',
        name: 'John Doe Vendor',
        email: 'vendor@example.com',
        password: 'vendor123',
        businessName: 'Demo Vendor Business',
        status: 'active',
        permissions: ['manage_inventory', 'view_reports', 'manage_cashiers'],
        isAutoGenerated: false // Legacy vendor
      }
    ];
    localStorage.setItem('vendors', JSON.stringify(mockVendors));
  }

  // Initialize inventory if not exists
  if (!localStorage.getItem('inventory')) {
    const mockInventory = [
      { id: 1, name: 'Coffee', price: 3.50, stock: 50, category: 'Beverages', shopId: 'shop_001', minStock: 10 },
      { id: 2, name: 'Sandwich', price: 8.99, stock: 25, category: 'Food', shopId: 'shop_001', minStock: 15 },
      { id: 3, name: 'Chips', price: 2.50, stock: 100, category: 'Snacks', shopId: 'shop_001', minStock: 20 },
      { id: 4, name: 'Water', price: 1.99, stock: 75, category: 'Beverages', shopId: 'shop_001', minStock: 25 },
      { id: 5, name: 'Cookie', price: 1.50, stock: 40, category: 'Snacks', shopId: 'shop_001', minStock: 10 },
      { id: 6, name: 'Tea', price: 2.99, stock: 30, category: 'Beverages', shopId: 'shop_001', minStock: 15 },
      { id: 7, name: 'Burger', price: 12.99, stock: 20, category: 'Food', shopId: 'shop_002', minStock: 10 },
      { id: 8, name: 'Fries', price: 4.99, stock: 60, category: 'Food', shopId: 'shop_002', minStock: 20 },
      { id: 9, name: 'Soda', price: 2.99, stock: 80, category: 'Beverages', shopId: 'shop_002', minStock: 25 },
      { id: 10, name: 'Souvenir Mug', price: 15.99, stock: 30, category: 'Retail', shopId: 'shop_003', minStock: 10 },
      { id: 11, name: 'T-Shirt', price: 24.99, stock: 25, category: 'Retail', shopId: 'shop_003', minStock: 15 },
      { id: 12, name: 'Keychain', price: 8.99, stock: 50, category: 'Retail', shopId: 'shop_003', minStock: 20 }
    ];
    localStorage.setItem('inventory', JSON.stringify(mockInventory));
  }

  // Initialize transactions if not exists
  if (!localStorage.getItem('transactions')) {
    const mockTransactions = [
      {
        id: 'txn_001',
        shopId: 'shop_001',
        cashierId: 'cashier_001',
        cashierName: 'Jane Smith',
        items: [
          { id: 1, name: 'Coffee', price: 3.50, quantity: 2, total: 7.00 }
        ],
        subtotal: 7.00,
        tax: 0.56,
        total: 7.56,
        timestamp: new Date(Date.now() - 120000).toISOString(),
        status: 'completed',
        paymentMethod: 'cash'
      },
      {
        id: 'txn_002',
        shopId: 'shop_001',
        cashierId: 'cashier_002',
        cashierName: 'Mike Johnson',
        items: [
          { id: 2, name: 'Sandwich', price: 8.99, quantity: 1, total: 8.99 },
          { id: 3, name: 'Chips', price: 2.50, quantity: 1, total: 2.50 }
        ],
        subtotal: 11.49,
        tax: 0.92,
        total: 12.41,
        timestamp: new Date(Date.now() - 300000).toISOString(),
        status: 'completed',
        paymentMethod: 'card'
      }
    ];
    localStorage.setItem('transactions', JSON.stringify(mockTransactions));
  }

  // Initialize vendor applications if not exists
  if (!localStorage.getItem('vendor_applications')) {
    const mockApplications = [
      {
        id: 'app_001',
        businessName: 'Coffee Corner Inc.',
        contactPerson: 'John Doe',
        email: 'john@coffeecorner.com',
        phone: '+1-555-0123',
        businessType: 'Food & Beverage',
        preferredLocation: 'Terminal A',
        status: 'approved',
        submittedAt: new Date(Date.now() - 86400000).toISOString(),
        reviewedAt: new Date(Date.now() - 43200000).toISOString(),
        reviewedBy: 'admin@airport.com'
      },
      {
        id: 'app_002',
        businessName: 'Travel Essentials',
        contactPerson: 'Jane Smith',
        email: 'jane@travelessentials.com',
        phone: '+1-555-0456',
        businessType: 'Retail',
        preferredLocation: 'Terminal B',
        status: 'pending',
        submittedAt: new Date(Date.now() - 3600000).toISOString()
      }
    ];
    localStorage.setItem('vendor_applications', JSON.stringify(mockApplications));
  }
};

// Generate automated email for vendor
export const generateVendorEmail = (businessName, contactPerson) => {
  // Handle undefined or null parameters
  if (!businessName || !contactPerson) {
    console.error('Missing required parameters for generateVendorEmail:', { businessName, contactPerson });
    return `vendor${Math.floor(Math.random() * 10000)}@airportvendor.com`;
  }
  
  // Create a clean business name for email
  const cleanBusinessName = businessName
    .toLowerCase()
    .replace(/[^a-z0-9]/g, '')
    .substring(0, 10);
  
  const cleanContactName = contactPerson
    .toLowerCase()
    .replace(/[^a-z0-9]/g, '')
    .substring(0, 5);
  
  // Generate a random number to ensure uniqueness
  const randomNum = Math.floor(Math.random() * 1000);
  
  return `${cleanContactName}.${cleanBusinessName}${randomNum}@airportvendor.com`;
};

// Generate automated password for vendor
export const generateVendorPassword = () => {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let password = '';
  
  // Ensure at least one uppercase, one lowercase, and one number
  password += chars.charAt(Math.floor(Math.random() * 26)); // Uppercase
  password += chars.charAt(26 + Math.floor(Math.random() * 26)); // Lowercase
  password += chars.charAt(52 + Math.floor(Math.random() * 10)); // Number
  
  // Add remaining characters
  for (let i = 3; i < 8; i++) {
    password += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  
  // Shuffle the password
  return password.split('').sort(() => Math.random() - 0.5).join('');
};

// Create vendor account from approved application
export const createVendorFromApplication = (application) => {
  const vendorId = `vendor_${Date.now()}`;
  const email = generateVendorEmail(application.businessName, application.contactPerson);
  const password = generateVendorPassword();
  
  const newVendor = {
    id: vendorId,
    name: application.contactPerson,
    email: email,
    password: password,
    businessName: application.businessName,
    status: 'active',
    permissions: ['manage_inventory', 'view_reports', 'manage_cashiers'],
    isAutoGenerated: true,
    applicationId: application.id,
    createdAt: new Date().toISOString(),
    lastPasswordChange: null
  };
  
  // Add to vendors list
  const vendors = JSON.parse(localStorage.getItem('vendors') || '[]');
  vendors.push(newVendor);
  localStorage.setItem('vendors', JSON.stringify(vendors));
  
  return {
    vendor: newVendor,
    credentials: {
      email: email,
      password: password
    }
  };
};

// Change vendor password
export const changeVendorPassword = (vendorId, newPassword) => {
  const vendors = JSON.parse(localStorage.getItem('vendors') || '[]');
  const vendorIndex = vendors.findIndex(v => v.id === vendorId);
  
  if (vendorIndex !== -1) {
    vendors[vendorIndex].password = newPassword;
    vendors[vendorIndex].lastPasswordChange = new Date().toISOString();
    vendors[vendorIndex].isAutoGenerated = false; // Mark as manually changed
    
    localStorage.setItem('vendors', JSON.stringify(vendors));
    return true;
  }
  
  return false;
};

// Helper function to get shop by ID
export const getShopById = (shopId) => {
  const shops = JSON.parse(localStorage.getItem('shops') || '[]');
  return shops.find(shop => shop.id === shopId);
};

// Helper function to get vendor by ID
export const getVendorById = (vendorId) => {
  const vendors = JSON.parse(localStorage.getItem('vendors') || '[]');
  return vendors.find(vendor => vendor.id === vendorId);
};

// Helper function to get cashiers by shop ID
export const getCashiersByShopId = (shopId) => {
  const cashiers = JSON.parse(localStorage.getItem('cashiers') || '[]');
  return cashiers.filter(cashier => cashier.shopId === shopId);
};

// Helper function to get inventory by shop ID
export const getInventoryByShopId = (shopId) => {
  const inventory = JSON.parse(localStorage.getItem('inventory') || '[]');
  return inventory.filter(item => item.shopId === shopId);
};

// Helper function to get transactions by shop ID
export const getTransactionsByShopId = (shopId) => {
  const transactions = JSON.parse(localStorage.getItem('transactions') || '[]');
  return transactions.filter(transaction => transaction.shopId === shopId);
}; 